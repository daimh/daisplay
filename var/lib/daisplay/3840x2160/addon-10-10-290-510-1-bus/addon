#!/usr/bin/env python3
#19500101 initial version daimon:/etc/Model/sh
import sys, os, time, json
from PIL import Image, ImageDraw, ImageFont
import magicbus, theride

route_rename = {
	'3-TO YTC'			: '3-H2Y',
	'4-TO BTC'			: '4-Y2A',
	'4-TO YTC'			: '4-A2Y',
	'32-TO MILLER P+R'	: '32',
	'65-to Green Rd P&R' : '65',
	'91-TO CHELSEA'		: '91',
	'91-TO ANN ARBOR'	: '91',
	'92-TO CANTON'		: '92',
	'92-TO ANN ARBOR'	: '92',

}

def draw_png(stop_route_time, crop_spec, elapsed_time):
	#
	width = 280
	height= 500
	row = 25
	#
	maze = (255, 209, 0)
	ross = (221, 202, 143)
	#
	fontsize = int(row/1.2)
	#
	bg = Image.open(f"{os.environ['DAISPLAY_VAR']}/background/background.png")
	img = bg.crop(crop_spec)
	draw = ImageDraw.Draw(img)
	fnt = ImageFont.truetype('/usr/share/fonts/TTF/DejaVuSans.ttf', fontsize)
	if elapsed_time == 0:
		elapsed_str = 'Updated: just now'
	else:
		elapsed_str = f'Updated: {round(elapsed_time)}s ago'
	draw.text((0, 0), elapsed_str, font=fnt, fill=maze)
	y = row + 10
	for st, route_time in sorted(stop_route_time.items()):
		draw.text((0, y), st, font=fnt, fill=maze)
		y += row
		for rt, time in sorted(route_time.items()):
			draw.text((20, y), rt, font=fnt, fill=ross)
			draw.text((100, y), time, font=fnt, fill=ross)
			y += row
	img.save('addon.png', 'PNG')
def merge_srt(srt1, srt2, route_rename):
	for stop_name, route_time in srt2.items():
		for route, time_list in route_time.items():
			route_new = route_rename.get(route, route)
			new_time_list = srt1.setdefault(stop_name, {}).setdefault(route_new, []) 
			new_time_list += time_list
	return srt1

def main():
	now = time.time()
	last = 0
	try:
		with open('addon.json') as fjson :
			last, stop_route_time = json.load(fjson)
	except FileNotFoundError as e:
		pass
	if now - last >= 10:
		print('json is too old')
		magicbus_srt = magicbus.get_stop_route_time(magicbus.stops)
		theride_srt = theride.get_stop_route_time(theride.stops)
		stop_route_time = merge_srt(magicbus_srt, theride_srt, route_rename)
		now = time.time()
		with open('addon.json', 'w') as fjson :
			json.dump((now, stop_route_time), fjson)
		last = now
	#list to string
	for st, route_time in stop_route_time.items():
		for rt in route_time.keys():
			time_list = route_time[rt]
			time_list = list(set(time_list))
			route_time[rt] = ','.join([str(i) for i in sorted(time_list)])
	#
	crop_spec = tuple([int(s) for s in sys.argv[1].split('-')[1:5]])
	draw_png(stop_route_time, crop_spec, now - last)
	for st in sorted(stop_route_time.keys()):
		print(st)
		for route_time in sorted(stop_route_time.get(st, {}).items()):
			print(route_time)
if __name__ == '__main__': main()
